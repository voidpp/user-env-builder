#!/usr/bin/env python3

import time
import sys
import os
from subprocess import check_output, CalledProcessError
from argparse import ArgumentParser
import re
from collections import OrderedDict

python_versions = OrderedDict()

path_env = os.getenv('PATH', '')
pattern = re.compile("python(\d)\.(\d)$")
default_python_version_pattern = re.compile("^python$")
default_python_path = None

for path in path_env.split(':'):
    if not os.path.isdir(path):
        continue
    for file in os.listdir(path):
        if default_python_path is None and default_python_version_pattern.match(file):
            default_python_path = os.path.realpath(os.path.join(path, file))

        matches = pattern.match(file)
        if not matches:
            continue
        python_versions[int("".join(matches.groups()))] = file

python_versions = OrderedDict(sorted(python_versions.items()))
matches = pattern.match(os.path.basename(default_python_path))
default_python_version = int("".join(matches.groups()))

if default_python_version not in python_versions:
    print("wait, what?")
    for c in "wwwwwwwwwwwwwwwaaaaaaaaaaaaaaiiiiiiiiiiiiitttttttttttttttt, wwwwwwwwwwwwwwhhhhhhhhhhhhhaaaaaaaaaatttttttttt????????":
        sys.stderr.write(c)
        sys.stderr.flush()
        time.sleep(0.01)
    print("")
    exit(1)

parser = ArgumentParser()
parser.add_argument('-n', '--name', type = str, default = os.path.basename(os.getcwd()), help = "the name. default is cwd so now: '%(default)s'")
parser.add_argument('-p', '--python', type = int, choices = python_versions.keys(), default = default_python_version, help = "python version. default: %(default)s")
parser.add_argument('--iamsure', action = 'store_true', default = False, help = "dont ask...")

args = parser.parse_args()

if not args.iamsure:
    print("Name of the virtual environment: '{}', python version: '{}'".format(args.name, python_versions[args.python]))
    confirm = input("Are you sure? [Y/n] ").strip().lower()
    if confirm != 'y' and confirm != '':
        exit()

try:
    res = check_output(['bash', '-c', 'source /usr/local/bin/virtualenvwrapper.sh && mkvirtualenv {} --python {}'.format(args.name, python_versions[args.python])])
    print(res.decode('utf-8'))
    with open('/tmp/cve_new_venv', 'w') as f:
        f.write(args.name)
except CalledProcessError as e:
    print(e)
    exit(e.returncode)
